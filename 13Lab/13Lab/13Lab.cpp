
#include <iostream>
#include <ctime>
#include <iomanip> 
#include <cstdlib>
using namespace std;


//Вариант 3. Для заданной целочисленной матрицы A(N, M) определить, является ли сумма её элементов чётным числом.

//int main()
//{
//	setlocale(LC_ALL, "ru");
//	srand((unsigned)time(NULL));
//	int** A, n, m, sum = 0;
//	cout << "Введите n: ";
//	cin >> n;
//	cout << "Введите m: ";
//	cin >> m;
//	A = new int* [n];
//	for (int i = 0; i < n; i++)
//		A[i] = new int[m];
//	for (int i = 0; i < n; i++) 
//	{
//		for (int j = 0; j < m; j++) 
//		{
//			A[i][j] = rand() % 99;
//			cout << "A[" << i << "," << j << "] = " << A[i][j] << endl;
//			sum += A[i][j];
//		}
//	}
//	if (sum % 2 == 0) cout << "Сумма элементов sum = " << sum << " — чётное число.";
//	else cout << "Сумма элементов sum = " << sum << " — нечётное число.";
//}



//Вариант 5. Дана целочисленная матрица A(N, M). Вычислить сумму и произведение тех её элементов, которые при делении на два дают нечётное число.

//int main()
//{
//	setlocale(LC_ALL, "ru");
//	srand((unsigned)time(NULL));
//	int** A, n, m, sum = 0, pr = 1;
//	cout << "Введите n: ";
//	cin >> n;
//	cout << "Введите m: ";
//	cin >> m;
//	A = new int* [n];
//	for (int i = 0; i < n; i++)
//		A[i] = new int[m];
//	for (int i = 0; i < n; i++) 
//	{
//		for (int j = 0; j < m; j++) 
//		{
//			A[i][j] = rand() % 99;
//			cout << "A[" << i << "," << j << "] = " << A[i][j] << endl;
//			if ((A[i][j] / 2) % 2 != 0 && A[i][j]%2 == 0) {
//				sum += A[i][j];
//				pr *= A[i][j];
//			}
//		}
//	}
//	cout << "Сумма элементов: " << sum << endl;
//	cout << "Произведение элементов: " << pr;
//}



//Доп  3.	Для заданной матрицы размером 6 на 6 найти такие значения k, что k-я строка матрицы совпадает с k-м столбцом.
//			Найти сумму элементов в тех строках, которые содержат хотя бы один отрицательный элемент.

//int main()
//{
//	setlocale(LC_ALL, "ru");
//	int n, m, sum = 0, i = 0, j = 0, k1 = 1, k2 = 1, k3 = 1, k4 = 1, k5 = 1, k6 = 1;
//	int A[5][5] = { 1,2,3,4,5,
//					2,1,0,8,1,
//					3,0,0,9,0,
//					4,8,9,3,7,
//					5,0,1,7,0 };
//
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			cout << A[i][j] << " ";
//		}
//		cout << endl;
//	}
//
//	for (i = 0, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k1++;
//		}
//	}
//	if (k1 == 6) cout << "1-ая строка совпадает с 1-ым столбцом.\n";
//	for (i = 1, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k2++;
//		}
//	}
//	if (k2 == 6) cout << "2-ая строка совпадает со 2-ым столбцом.\n";
//	for (i = 2, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k3++;
//		}
//	}
//	if (k3 == 6) cout << "3-я строка совпадает с 3-им столбцом.\n";
//	for (i = 3, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k4++;
//		}
//	}
//	if (k4 == 6) cout << "4-ая строка совпадает с 4-ым столбцом.\n";
//	for (i = 4, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k5++;
//		}
//	}
//	if (k5 == 6) cout << "5-ая строка совпадает с 5-ым столбцом.\n";
//	for (i = 5, j = 0; j < 5; j++)
//	{
//		if (A[i][j] == A[j][i]) {
//			k6++;
//		}
//	}
//	if (k6 == 6) cout << "6-ая строка совпадает с 6-ым столбцом.\n";
//}



//Доп 5. Путем перестановки элементов квадратной вещественной матрицы добиться того, чтобы ее максимальный элемент находился в левом верхнем
//		 углу, следующий по величине в позиции (2,2), следующий по величине  в позиции (3,3) и т. д., заполнив таким образом всю главную диагональ.

//int main()
//{
//	setlocale(LC_ALL, "ru");
//	srand((unsigned)time(NULL));
//	int i = 0, j = 0, rI1 = 0, rJ1 = 0, rI2 = 0, rJ2 = 0, rI3 = 0, rJ3 = 0, rI4 = 0, rJ4 = 0, rI5 = 0, rJ5 = 0, rI6 = 0, rJ6 = 0;
//	float e1 = 0, e2 = 0, e3 = 0, e4 = 0, e5 = 0, e6 = 0, max1 = 0, max2 = 0, max3 = 0, max4 = 0, max5 = 0, max6 = 0;
//	float A[5][5];
//	cout << "\n\t Изначальная матрица:\n\n";
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			A[i][j] = 0.01*(rand() % 9999);
//			cout << A[i][j] << "\t";
//		}
//		cout << "\n\n";
//	}
//	e1 = A[0][0];
//	e2 = A[1][1];
//	e3 = A[2][2];
//	e4 = A[3][3];
//	e5 = A[4][4];
//	cout << endl;
//	for (i = 0; i < 5; i++) //Поиск максимального элемента
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max1) 
//			{
//				max1 = A[i][j];
//				rI1 = i;
//				rJ1 = j;
//			}
//		}
//	}
//	A[0][0] = max1; // Вставка максимального элемента в A[0][0]
//	A[rI1][rJ1] = e1; // Вставка элемента А[0][0] в место A max
//	for (i = 0; i < 5; i++) //Поиск второго максимального элемента
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max2 && A[i][j] < max1)
//			{
//				max2 = A[i][j];
//				rI2 = i;
//				rJ2 = j;
//			}
//		}
//	}
//	A[1][1] = max2;
//	A[rI2][rJ2] = e2;
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max3 && A[i][j] < max2)
//			{
//				max3 = A[i][j];
//				rI3 = i;
//				rJ3 = j;
//			}
//		}
//	}
//	A[2][2] = max3;
//	A[rI3][rJ3] = e3;
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max4 && A[i][j] < max3)
//			{
//				max4 = A[i][j];
//				rI4 = i;
//				rJ4 = j;
//			}
//		}
//	}
//	A[3][3] = max4;
//	A[rI4][rJ4] = e4;
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max4 && A[i][j] < max3)
//			{
//				max4 = A[i][j];
//				rI4 = i;
//				rJ4 = j;
//			}
//		}
//	}
//	A[3][3] = max4;
//	A[rI4][rJ4] = e4;
//	for (i = 0; i < 5; i++)
//	{
//		for (j = 0; j < 5; j++)
//		{
//			if (A[i][j] > max5 && A[i][j] < max4)
//			{
//				max5 = A[i][j];
//				rI5 = i;
//				rJ5 = j;
//			}
//		}
//	}
//	A[4][4] = max5;
//	A[rI5][rJ5] = e5;
//	cout << setw(60) << setfill('=');
//	cout << "\n\n\t   Новая матрица:\n\n\n";
//	for (i = 0; i < 5; i++) //Вывод новой матрицы
//	{
//		for (j = 0; j < 5; j++)
//		{
//			cout << A[i][j] << "\t";
//		}
//		cout << "\n\n";
//	}
//}



//Доп 7. Дана действительная матрица A(N, N) . Найти сумму  и  мах  значение  среди элементов, расположенных в заштрихован-ной части матрицы.

int main()
{
	setlocale(LC_ALL, "ru");
	srand((unsigned)time(NULL));
	int n = 7, A[7][7], sum = 0, up = 0, down = 0, max = 0, k, p, i, j;
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			A[i][j] = rand() % 10;
			cout << A[i][j] << " ";
		}
		cout << "\n";
	}
	k = 0; 
	p = n;
	for (i = 0; i < n; ++i)
	{
		for (j = k; j < p; ++j)
		{
			up += A[i][j];
			if (max < (A[i][j]))
			{
				max = A[i][j];
			}
		}
		k++;
		p--;
	}
	cout << "\nСумма верхней части: " << up;
	k = n;
	p = 0;
	for (i = 0; i < n; i++)
	{
		for (j = k; j > p; j--)
		{
			down += A[i][j];
			if (max < (A[i][j]))
			{
				max = A[i][j];
			}
		}
		k--;
		p++;
	}
	cout << "\nСумма нижней части: " << down;
	sum = up + down - A[n / 2][n / 2];
	cout << "\nСумма заштрихованной части: " << sum;
	cout << "\nМаксимальный элемент: " << max;
}